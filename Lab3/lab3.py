# -*- coding: utf-8 -*-
"""Lab3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11c_K83awJbyQyj1pZ9QQfEo7dUjkAAOu
"""

import numpy as np
from scipy import linalg, sparse
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from bokeh.plotting import figure
from bokeh.io import output_file, show
from bokeh.layouts import gridplot

# my_list = ['Mała', 'muszka', 'spod', 'Łopuszki', 'chciała', 'mieć', 'różowe', 'nóżki', ' – różdżką', 'nóżki', 'czarowała,', ' lecz', 'wciąż', 'nóżki', 'czarne', 'miała.', ' – Po', 'cóż', 'czary,', ' moja', 'muszko?', ' Ruszże',
#            'móżdżkiem,', ' a', 'nie', 'różdżką!', ' Wyrzuć', 'wreszcie', 'różdżkę', 'wróżki', 'i', 'unurzaj', 'w', 'różu', 'nóżki!']
# my_list2 = [4,5,6,7,3,4,5,6,7,12,3,4,5,8,7,31,14,8,9,2,5,3,13,41,15,11,12,32,34,27,35,46,57,68,39,48,57,66,2,3,4,5,6,7,8,9,1,17,13,12,12,11,13,4,16,21,23,5,4,8]

# 1 - wybiera elementy z listy pomiędzy indeksami 6 i 12
# my_list[6:12]

# 2 - pokazuje ile raz wskazany element występuje w liście (w tym wypadku 4 występuje 6 razy)
# my_list2.count(4)

# 3 - sortuje wskazaną listę
# my_list2.sort()
# print(my_list2)

# 4 - dodaje wartości dwóch tablic do siebie (muszą mieć one taką samą długość)
# my_array = np.array([1, 2, 3, 4])
# print(my_array + np.array([10, 12, 13, 14]))

# 5 - wylicza średnią z wartości w tablicy
# my_array2 = np.array([1, 2, 3, 4, 5, 9, 12, 21, 16, 34, 25, 56, 87, 36, 92, 49, 103, 23, 64, 47])
# np.mean(my_array2)

# 6 - pokazuje ile elementow znajduje się w tablicy
# len(my_array2)

# 7 - pokazuje wynik pierwiastka drugiego stopnia z każdej z wartości w tablicy
# np.sqrt(my_array2)

# 8 - pokazuje które elementy z tablicy mają wartość większą od 25
# my_array2 > 25

# 9 - sumuje wartość wszystkich elementów w tablicy
# my_array2.sum()

# 10 - pokazuje element z największą wartością w tablicy
# my_array2.max()

# A = np.matrix(np.random.random((2,2)))
# B = np.matrix(np.random.random((5,3)))
# C = np.mat(np.random.random((10,5)))
# D = np.mat([[3,4], [5,6]])

# 11 - tworzy trenspozycję macierzy
# B.T

# 12 - pokazuje rząd macierzy
# np.linalg.matrix_rank(C)

# 13 - pokazuje wartość logarytmu dla elementów w tablicy
# linalg.logm(A) 

# 14 - pokazuje wartość sinusa dla elementów w tablicy
# linalg.sinm(D) 

# 15 - mnoży przez siebie dwie tablice
# np.multiply(D,A)

# data = pd.read_csv('samochody1tys.csv')
# df = data.rename(columns={"id" : "ID", "marka" : "MARKA", "model" : "MODEL", "rok_produkcji" : "ROK PRODUKCJI", "rodzaj_silnika" : "RODZAJ SILNIKA",
#                                  "pojemnosc_silnika" : "POJEMNOŚĆ SILNIKA", "przebieg" : "PRZEBIEG", "cena" : "CENA", "wojewodztwo" : "WOJEWÓDZTWO"}).copy()

# 16 - pokazuje ile niezerowych wartości jest w każdej kolumnie w tabeli
# df.count()

# 17 - pokazuje wartość minimalną, maksymalną oraz sumę wartości wskazanej kolumny dla wartości z drugiej kolumny
# df.groupby('MARKA')['CENA'].agg([min, max, sum])

# 18 - wybranie dwudziestu losowych wartości i posortowanie ich względem wskazanej kolumny
# df.sample(20).sort_values('ROK PRODUKCJI')

# 19 - wybranie pięćdziesiąciu losowych wartości i usunięcie duplikatów na podstawie wskazanej kolumny
# df.sample(50).drop_duplicates('MARKA')

# 20 - zliczenie unikalnych wartości w każdej z kolumn
# df.nunique()


# 21 -


# 22 - 


# 23 - 


# 24 - 


# 25 - 

# 26 - przygotowanie danych i stworzenie wykresu
# x = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
# y = [10,48,25,78,92,31,21,14,55,63,68,100,55,45,7,33,47,78,92,51]
# fig = plt.figure()
# ax = fig.add_subplot()
# ax.plot(x, y)
# # plt.show()

# # 27 - zmiana koloru i grubości linii wykresu
# ax.plot(x, y, color='red', linewidth=3)
# # plt.show()

# # 28 - dodanie dodatkowych markerów na wykresie
# ax.scatter([2,4,6,8,10,12,14,16,18,20],[5,15,25,30,35,40,45,50,55,60],color='darkgreen',marker='o')
# # plt.show()

# # 29 - dodawanie tytułu wykresu
# plt.title('Przykładowy wykres', fontsize=20)
# # plt.show()

# # 30 - dodanie opisu osi X i Y
# ax.set(ylabel='Oś Y', xlabel='Oś X')
# ax.legend(loc='best') 
# plt.show()

titanic = sns.load_dataset("titanic")
iris = sns.load_dataset("iris")

# 31 - wykres pudełkowy pokazujący rozkład wieku wśród mężczyzn, którzy przeżyli i zginęli
# sns.boxplot(x="alive", y="age", hue="adult_male", data=titanic)

# 32 - wykres rozrzutu przedstawiający długość płatków dla różnych gatunków irysów
# sns.stripplot(x="species", y="petal_length", data=iris)

# 33 - wykres słupkowy pokazujący liczbę osób, które przeżyły w zależności od płci i klasy
# sns.barplot(x="sex", y="survived", hue="class", data=titanic)

# 34 - mapa ciepła na podstawie losowo wygenerowanych danych
# uniform_data = np.random.rand(15, 15)
# sns.heatmap(uniform_data,vmin=0,vmax=1)

# 35 - wykres słupkowy pokazujący liczbę obserwacji na wskazanych danych
# sns.countplot(x="deck", data=titanic, palette="Greens_d")

# p1 = figure(plot_width=600, tools='pan,box_zoom')
# p2 = figure(plot_width=600, plot_height=600, x_range=(0, 8), y_range=(0, 8))
# p3 = figure() 

# df = pd.DataFrame(np.array([[33.9,4,65, 'US'],
#  [32.4,4,66, 'Asia'],
#  [21.4,4,109, 'Europe']]),
#  columns=['mpg','cyl', 'hp', 'origin'],
#  index=['Toyota', 'Fiat', 'Volvo'])

# from bokeh.models import ColumnDataSource
# cds_df = ColumnDataSource(df)

# # 36 - 
# p1.circle(np.array([1,2,3]), np.array([3,2,1]), fill_color='white')
# p2.square(np.array([1.5,3.5,5.5]), [1,4,3], color='blue', size=1)
# output_file("36.html")

# 37 - 
# p1.line([1,2,3,4], [3,4,5,6], line_width=2)
# output_file("37.html")